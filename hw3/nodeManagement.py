'''
Classes and functions for use by breadth-first and depth-first searching.
'''


# Item class to represent items we read in
class Item:
	def __init__(self, w, v, d):
		self.weight = w
		self.value = v
		self.description = d


# Node class to represent a possible solution in the tree
class Node:
	def __init__(self, value, weight, itemsInSack, itemsLeft):
		self.value = value
		self.weight = weight
		self.itemsInSack = itemsInSack
		self.itemsLeft = itemsLeft


# Returns an array of child nodes for a node
def genChildrenFor(node):
	children = []

	# Iterate over all of the items left and create new child nodes with them
	for i in range(0, len(node.itemsLeft)):
		# The child's value and weight will be the parent's plus whatever the
		# selected item's value is
		childValue = node.value + node.itemsLeft[i].value
		childWeight = node.weight + node.itemsLeft[i].weight

		# Copy the list of items in the parent node and append the selected item
		# from the list of items left
		childItemsInSack = node.itemsInSack[:]
		childItemsInSack.append(node.itemsLeft[i])

		# The items left for this branch of the tree should not include the
		# selected node or any before it in the list, as combinations including
		# those items will be generated by the previously generated children.
		# If they were included, the permutation not combination of the items
		# would be generated which for this problem is redundant.
		childItemsLeft = node.itemsLeft[(i + 1):]

		# Create the node and add it to the list of children
		child = Node(childValue, childWeight, childItemsInSack, childItemsLeft)
		children.append(child)

	return children


# Print the contents of a solution node
def printSolution(solution):
	items = solution.itemsInSack
	print 'Best combination of items in a sack that can hold {0:d}'.format(solution.weight)
	print 'has a value of {0:d}.'.format(solution.value)
	print '\nThe sack contains the following:'
	print 'Item                      Weight     Value'
	for i in range(0, len(solution.itemsInSack)):
		print '{0:25} {1:<10d} {2:d}'.format(
			items[i].description,
			items[i].weight,
			items[i].value
		)
